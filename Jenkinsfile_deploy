def dockerRegistryAddress = '648265802301.dkr.ecr.us-west-2.amazonaws.com'
def dockerImageNamespace = 'ep/ep-store'
def dockerImageTag = params.DOCKER_IMAGE_TAG 


def ec2InstanceHost = '10.11.12.95'
def ec2InstanceUser = 'ec2-user'
def ec2InstanceSshKey = '/etc/ep/secure/ssh/ep-ec2.pem'


timestamps {
	ansiColor('xterm') {
		node('node-small') {
			stage('SETUP') {
				deleteDir()
				dir('docker') {
				git branch: "master", url: 'git@github.elasticpath.net:DevOps/Docker.git'
			}
				checkout scm
			}
			stage('UNDEPLOY_EXISTING') {
				sh """
					ssh -i ${ec2InstanceSshKey} ${ec2InstanceUser}@${ec2InstanceHost} \"\"\"
					  export REGISTRY_ADDRESS=${dockerRegistryAddress}
					  export NAMESPACE=${dockerImageNamespace}
					  export VERSION=${dockerImageTag}

					  if [ -d "~/ref-store-service" ]; then
						cd ref-store-service
						docker-compose down || true
						cd -
					  fi

					  rm -rf ref-store-service
					  mkdir -p ref-store-service
					\"\"\"
				"""
			}
			stage('DEPLOY') {
				// Copy over new deployment files
				sh """
					scp -i ${ec2InstanceSshKey} -r * ${ec2InstanceUser}@${ec2InstanceHost}:~/ref-store-service
				"""

				// Deploy new version
				sh """
					ssh -i ${ec2InstanceSshKey} ${ec2InstanceUser}@${ec2InstanceHost} \"\"\"
					  export REGISTRY_ADDRESS=${dockerRegistryAddress}
					  export NAMESPACE=${dockerImageNamespace}
					  export VERSION=${dockerImageTag}

					  cd ~/ref-store-service
					  
					  eval '\$(aws ecr get-login --no-include-email)'

					  /usr/local/bin/docker-compose pull
					  /usr/local/bin/docker-compose up -d
					\"\"\"
				"""

				currentBuild.description = "Image Tag: ${dockerImageTag}"
			}
		}
	}
}