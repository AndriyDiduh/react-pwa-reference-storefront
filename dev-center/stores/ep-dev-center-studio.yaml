AWSTemplateFormatVersion: '2010-09-09'
Description: Elastic Path Developer Center's Studio
Parameters:
  InstanceAmiId:
    Description: An AMI ID of Amazon Linux HVM SSD EBS-Backed 64bit
    Type: AWS::EC2::Image::Id
    ConstraintDescription: Must be a valid Amazon Linux AMI ID
    Default: ami-bf4193c7
  InstanceType:
    Description: EC2 instance type
    Type: String
    ConstraintDescription: Must be a valid EC2 instance type
    Default: m5.xlarge
  InstanceTagName:
    Description: Name of EC2 instance
    Type: String
    Default: ep-dev-center-studio
  InstanceTagOwner:
    Description: Owner of EC2 instance
    Type: String
    Default: DevOps
  InstanceTagImmortal:
    Description: Set to true if instance should be kept and not deleted
    Type: String
    ConstraintDescription: Must be a string of either true of false
    Default: true
  InstanceEbsRootDeviceName:
    Description: Mount device name for root directory
    Type: String
    Default: /dev/xvda
  InstanceEbsRootVolumeSize:
    Description: Volume size in GB for root mount device
    Type: String
    Default: '50'
  VpcId:
    Description: An existing VPC to host EC2 instance
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: Must be an existing VPC ID
    Default: vpc-976b7afe
  SubnetId:
    Description: An existing Subnet ID within a VPC to host EC2 instance in
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: Must be an existing Subnet ID
    Default: subnet-6b6a7b02
  SecurityGroup:
    Description: Group set of security groups to apply on EC2 instance
    Type: List<AWS::EC2::SecurityGroup::Id>
    Default: 'sg-527add37,sg-fa78df9f'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be a name of an existing EC2 key pair
    Default: ep-ec2
  SshCidr:
    Description: IP address range that can be used to SSH to the EC2 instance
    Type: String
    MinLength: '9'
    MaxLength: '18'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Default: '0.0.0.0/0'
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
Conditions:
  HasSecurityGroup: !Not [ !Equals [ '', !Select [ 0, !Ref SecurityGroup ] ] ]
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - update
            - packages
            - services
            - epCommerce
        update:
          commands:
            yumUpdate:
              command: yum update -y
        packages:
          packages:
            yum:
              docker.x86_64: []
              dstat.noarch: []
              htop.x86_64: []
          commands:
            dockerCompose:
              command: /usr/bin/pip install docker-compose
        services:
          services:
            sysvinit:
              docker:
                enabled: "true"
                ensureRunning: "true"
                packages:
                  yum:
                    - "docker"
        epCommerce:
          commands:
            prerequisite:
              command: mkdir /ep && chown -R ec2-user:ec2-user /ep
    Properties:
      ImageId: !Ref 'InstanceAmiId'
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      IamInstanceProfile: !Ref 'InstanceIamProfile'
      DisableApiTermination: 'false'
      InstanceInitiatedShutdownBehavior: stop
      Monitoring: 'false'
      Tags:
        - Key: Name
          Value: !Ref 'InstanceTagName'
        - Key: Owner
          Value: !Ref 'InstanceTagOwner'
        - Key: Immortal
          Value: !Ref 'InstanceTagImmortal'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeleteOnTermination: 'true'
          DeviceIndex: '0'
          GroupSet: !Split
            - ','
            - !Join
                - ','
                -   - !Ref 'InstanceSecurityGroup'
                    - !If [ HasSecurityGroup, !Join [ ',', !Ref SecurityGroup ], !Ref 'AWS::NoValue' ]
          SubnetId: !Ref 'SubnetId'
      BlockDeviceMappings:
        - DeviceName: !Ref 'InstanceEbsRootDeviceName'
          Ebs:
            VolumeType: gp2
            VolumeSize: !Ref 'InstanceEbsRootVolumeSize'
            DeleteOnTermination: 'true'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource EC2Instance --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:
        !Sub
          - ${InstanceTagName}-group
          - { InstanceTagName: !Ref InstanceTagName }
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'SshCidr'
  InstanceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName:
            !Sub
              - ${InstanceTagName}-policy
              - { InstanceTagName: !Ref InstanceTagName }
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:BatchGetImage'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:GetAuthorizationToken'
                Resource: '*'
  InstanceIamProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref 'InstanceIamRole'
Outputs:
  PublicIp:
    Description: Public IP Address
    Value: !GetAtt EC2Instance.PublicIp
  PrivateIp:
    Description: Private IP Address
    Value: !GetAtt EC2Instance.PrivateIp
